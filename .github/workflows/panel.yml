name: PufferPanel

on:
  workflow_dispatch:

permissions:
  actions: write
  contents: write

concurrency:
  group: pufferpanel
  cancel-in-progress: true

jobs:
  pufferpanel:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          docker-compose --version

      - name: Download latest backup from Releases
        continue-on-error: true
        uses: robinraju/release-downloader@v1.11
        with:
          tag: backups
          fileName: "pane-data-*.part"
          out-file-path: "."

      - name: Restore backup
        run: |
          if ls pane-data-*.part 1> /dev/null 2>&1; then
            echo "Found backup parts. Reconstructing..."
            cat pane-data-*.part > pane-data.tar.gz
            rm -rf pufferpanel
            mkdir -p pufferpanel
            tar -xzf pane-data.tar.gz -C .
            echo "Backup restored successfully."
          else
            echo "No backup found. Starting fresh."
          fi

      - name: Start Panel
        run: |
            mkdir -p pufferpanel

            # Create docker-compose.yml WITHOUT heredoc (avoids EOF indentation problems)
            printf "%s\n" \
            "version: '3.8'" \
            "services:" \
            "  pufferpanel:" \
            "    image: pufferpanel/pufferpanel:latest" \
            "    container_name: pufferpanel" \
            "    restart: unless-stopped" \
            "    ports:" \
            "      - \"8080:8080\"" \
            "      - \"5657:5657\"" \
            "    volumes:" \
            "      - ./config:/etc/pufferpanel" \
            "      - ./data:/var/lib/pufferpanel" \
            "    environment:" \
            "      PUFFER_ADMIN_EMAIL: \"admin@example.com\"" \
            > pufferpanel/docker-compose.yml

            docker-compose -f pufferpanel/docker-compose.yml up -d

            # Wait for container to initialize
            sleep 10

            # Create admin user (ignore error if already exists)
            docker exec pufferpanel /pufferpanel/pufferpanel user add \
              --name kshosting \
              --email kshosting@ksmail.com \
              --password "kshosting@55" \
              --admin || echo "User may already exist"
          fi

      - name: Ngrok
        run: |
          curl -sSL https://ngrok-agent.s3.amazonaws.com/ngrok.asc \
            | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com bookworm main" \
            | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok
          # Put your ngrok authtoken in repo Secrets as NGROK_AUTHTOKEN
          if [ -n "${{ secrets.NGROK_AUTHTOKEN }}" ]; then
            ngrok config add-authtoken "${{ secrets.NGROK_AUTHTOKEN }}" || true
          fi
          # Run in background (nohup so it doesn't block the step)
          nohup ngrok http 8080 --log=stdout &>/tmp/ngrok.log &

      - name: Backup Panel Data
        if: always()
        run: |
          echo "Creating multi-part backup (max 1.75GB per file)..."
          sudo tar -czf - pufferpanel | split -b 1750M - "backup-"
          i=1
          for f in backup-*; do
            mv "$f" "pane-data-${i}.part"
            i=$((i+1))
          done
          ls -lh pane-data-*.part

      - name: Delete old backup assets
        if: always()
        run: |
          assets=$(gh release view backups --json assets --jq '.assets[].name' || echo "")
          for asset in $assets; do
            gh release delete-asset backups "$asset" -y || true
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to GitHub Release
        if: always()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: backups
          name: "Latest Backup"
          body: "PufferPanel backup"
          files: pane-data-*.part
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Restart Workflow
        if: always()
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: PufferPanel
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
